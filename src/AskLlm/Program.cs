using AskLlm.Commands;
using AskLlm.Models;
using AskLlm.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Cli.Extensions.DependencyInjection;
using System.Reflection;

namespace AskLlm;

public static class Program
{
    public static async Task<int> Main(string[] args)
    {
        var services = new ServiceCollection();
        services = SetupIoC(services);

        using var registrar = new DependencyInjectionRegistrar(services);
        var app = new CommandApp<AskCommand>(registrar);

        app.Configure(config =>
        {
            config.PropagateExceptions();
            config.SetApplicationVersion(GetVersion());
            config.SetApplicationName("askllm");

            config.AddCommand<AskCommand>("ask")
                .WithDescription("Send a prompt to a configured large language model.");

        });

        return await app.RunAsync(args);
    }

    private static ServiceCollection SetupIoC(this ServiceCollection services)
    {
        var configuration = new ConfigurationBuilder()
            .AddEnvironmentVariables()
            .Build();

        services.AddLogging(builder =>
        {
            builder.ClearProviders();
            builder.AddConsole();
            builder.SetMinimumLevel(LogLevel.Information);
        });

        services.AddSingleton(AskLlmSettings.Create(configuration));
        services.AddScoped<IChatEndpointService, ChatEndpointService>();
        services.AddScoped<AskCommand>();
        services.AddSingleton<IAnsiConsole>(_ => AnsiConsole.Console);

        return services;
    }

    static string GetVersion()
    {
        // Generated by GitVersion in its msbuild task, from the Git tag.
        return Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "0.0.1";
    }
}
