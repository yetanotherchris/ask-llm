using AskLlm.Commands;
using AskLlm.Models;
using AskLlm.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Spectre.Console;
using System.CommandLine;
using System.Reflection;

namespace AskLlm;

public static class Program
{
    public static async Task<int> Main(string[] args)
    {
        var services = new ServiceCollection();
        services = SetupIoC(services);

        await using var provider = services.BuildServiceProvider();
        await using var scope = provider.CreateAsyncScope();

        var defaultsMerger = scope.ServiceProvider.GetRequiredService<EnvironmentDefaultsMerger>();
        var mergedArgs = defaultsMerger.MergeWithStoredDefaults(args);

        var commandFactory = scope.ServiceProvider.GetRequiredService<RootCommandFactory>();
        var rootCommand = commandFactory.Create(GetVersion());

        return await rootCommand.InvokeAsync(mergedArgs);
    }

    private static ServiceCollection SetupIoC(this ServiceCollection services)
    {
        var configuration = new ConfigurationBuilder()
            .AddEnvironmentVariables()
            .Build();

        services.AddLogging(builder =>
        {
            builder.ClearProviders();
            builder.AddConsole();
            builder.SetMinimumLevel(LogLevel.Information);
        });

        services.AddSingleton(AskLlmSettings.Create(configuration));
        services.AddScoped<IChatEndpointService, ChatEndpointService>();
        services.AddScoped<AskCommand>();
        services.AddSingleton<EnvironmentDefaultsMerger>();
        services.AddScoped<RootCommandFactory>();
        services.AddSingleton<IAnsiConsole>(_ => AnsiConsole.Console);

        return services;
    }

    static string GetVersion()
    {
        var informationalVersion = Assembly
            .GetExecutingAssembly()
            .GetCustomAttribute<AssemblyInformationalVersionAttribute>()?
            .InformationalVersion;

        if (!string.IsNullOrWhiteSpace(informationalVersion))
        {
            return informationalVersion; // Generated by GitVersion in its msbuild task, from the Git tag.
        }

        return Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "0.0.1";
    }
}
