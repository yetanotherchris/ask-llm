using AskLlm.Commands;
using AskLlm.Models;
using AskLlm.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Cli.Extensions.DependencyInjection;
using System.Reflection;
using System.Text;

namespace AskLlm;

public static class Program
{
    public static async Task<int> Main(string[] args)
    {
        var mergedArgs = MergeWithStoredDefaults(args);

        var services = new ServiceCollection();
        services = SetupIoC(services);

        using var registrar = new DependencyInjectionRegistrar(services);
        var app = new CommandApp<AskCommand>(registrar);

        app.Configure(config =>
        {
            config.PropagateExceptions();
            config.SetApplicationVersion(GetVersion());
            config.SetApplicationName("askllm");

            config.AddCommand<AskCommand>("ask")
                .WithDescription("Send a prompt to a configured large language model.");

        });

        return await app.RunAsync(mergedArgs);
    }

    private static ServiceCollection SetupIoC(this ServiceCollection services)
    {
        var configuration = new ConfigurationBuilder()
            .AddEnvironmentVariables()
            .Build();

        services.AddLogging(builder =>
        {
            builder.ClearProviders();
            builder.AddConsole();
            builder.SetMinimumLevel(LogLevel.Information);
        });

        services.AddSingleton(AskLlmSettings.Create(configuration));
        services.AddScoped<IChatEndpointService, ChatEndpointService>();
        services.AddScoped<AskCommand>();
        services.AddSingleton<IAnsiConsole>(_ => AnsiConsole.Console);

        return services;
    }

    static string GetVersion()
    {
        // Generated by GitVersion in its msbuild task, from the Git tag.
        return Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "0.0.1";
    }

    private static string[] MergeWithStoredDefaults(string[] args)
    {
        var defaultsRaw = Environment.GetEnvironmentVariable("ASKLLM_DEFAULTS");
        if (string.IsNullOrWhiteSpace(defaultsRaw))
        {
            return args;
        }

        var defaultArguments = SplitArguments(defaultsRaw);
        if (defaultArguments.Count == 0)
        {
            return args;
        }

        var providedOptions = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        foreach (var argument in args)
        {
            if (IsOption(argument))
            {
                providedOptions.Add(argument);
            }
        }

        var mergedArguments = new List<string>(args);

        for (var i = 0; i < defaultArguments.Count; i++)
        {
            var token = defaultArguments[i];
            if (!IsOption(token))
            {
                continue;
            }

            if (string.Equals(token, "--prompt", StringComparison.OrdinalIgnoreCase))
            {
                if (i + 1 < defaultArguments.Count && !IsOption(defaultArguments[i + 1]))
                {
                    i++;
                }

                continue;
            }

            var hasValue = i + 1 < defaultArguments.Count && !IsOption(defaultArguments[i + 1]);
            if (!hasValue)
            {
                continue;
            }

            if (providedOptions.Contains(token))
            {
                i++;
                continue;
            }

            mergedArguments.Add(token);

            mergedArguments.Add(defaultArguments[i + 1]);
            i++;
        }

        return mergedArguments.ToArray();
    }

    private static List<string> SplitArguments(string commandLine)
    {
        var results = new List<string>();
        var current = new StringBuilder();
        var inQuotes = false;
        var escapeNext = false;

        foreach (var character in commandLine)
        {
            if (escapeNext)
            {
                current.Append(character);
                escapeNext = false;
                continue;
            }

            if (character == '\\')
            {
                escapeNext = true;
                continue;
            }

            if (character == '"')
            {
                inQuotes = !inQuotes;
                continue;
            }

            if (char.IsWhiteSpace(character) && !inQuotes)
            {
                if (current.Length > 0)
                {
                    results.Add(current.ToString());
                    current.Clear();
                }

                continue;
            }

            current.Append(character);
        }

        if (escapeNext)
        {
            current.Append('\\');
        }

        if (current.Length > 0)
        {
            results.Add(current.ToString());
        }

        return results;
    }

    private static bool IsOption(string value)
    {
        return value.StartsWith("--", StringComparison.Ordinal);
    }
}
